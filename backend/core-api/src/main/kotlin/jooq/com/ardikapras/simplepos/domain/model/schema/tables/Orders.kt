/*
 * This file is generated by jOOQ.
 */
package com.ardikapras.simplepos.domain.model.schema.tables


import com.ardikapras.simplepos.domain.model.schema.Public
import com.ardikapras.simplepos.domain.model.schema.keys.ORDERS_PKEY
import com.ardikapras.simplepos.domain.model.schema.keys.ORDERS__ORDERS_CUSTOMER_ID_FKEY
import com.ardikapras.simplepos.domain.model.schema.keys.ORDERS__ORDERS_USER_ID_FKEY
import com.ardikapras.simplepos.domain.model.schema.tables.records.OrdersRecord

import java.math.BigDecimal
import java.time.OffsetDateTime
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Orders(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, OrdersRecord>?,
    aliased: Table<OrdersRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<OrdersRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.orders</code>
         */
        val ORDERS: Orders = Orders()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<OrdersRecord> = OrdersRecord::class.java

    /**
     * The column <code>public.orders.order_id</code>.
     */
    val ORDER_ID: TableField<OrdersRecord, Int?> = createField(DSL.name("order_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.orders.user_id</code>.
     */
    val USER_ID: TableField<OrdersRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.orders.customer_id</code>.
     */
    val CUSTOMER_ID: TableField<OrdersRecord, Int?> = createField(DSL.name("customer_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.orders.order_date</code>.
     */
    val ORDER_DATE: TableField<OrdersRecord, OffsetDateTime?> = createField(DSL.name("order_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.orders.total_amount</code>.
     */
    val TOTAL_AMOUNT: TableField<OrdersRecord, BigDecimal?> = createField(DSL.name("total_amount"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<OrdersRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<OrdersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.orders</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.orders</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.orders</code> table reference
     */
    constructor(): this(DSL.name("orders"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, OrdersRecord>): this(Internal.createPathAlias(child, key), child, key, ORDERS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<OrdersRecord, Int?> = super.getIdentity() as Identity<OrdersRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<OrdersRecord> = ORDERS_PKEY
    override fun getReferences(): List<ForeignKey<OrdersRecord, *>> = listOf(ORDERS__ORDERS_USER_ID_FKEY, ORDERS__ORDERS_CUSTOMER_ID_FKEY)

    private lateinit var _users: Users
    private lateinit var _customers: Customers

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    fun users(): Users {
        if (!this::_users.isInitialized)
            _users = Users(this, ORDERS__ORDERS_USER_ID_FKEY)

        return _users;
    }

    val users: Users
        get(): Users = users()

    /**
     * Get the implicit join path to the <code>public.customers</code> table.
     */
    fun customers(): Customers {
        if (!this::_customers.isInitialized)
            _customers = Customers(this, ORDERS__ORDERS_CUSTOMER_ID_FKEY)

        return _customers;
    }

    val customers: Customers
        get(): Customers = customers()
    override fun `as`(alias: String): Orders = Orders(DSL.name(alias), this)
    override fun `as`(alias: Name): Orders = Orders(alias, this)
    override fun `as`(alias: Table<*>): Orders = Orders(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Orders = Orders(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Orders = Orders(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Orders = Orders(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<Int?, Int?, Int?, OffsetDateTime?, BigDecimal?> = super.fieldsRow() as Row5<Int?, Int?, Int?, OffsetDateTime?, BigDecimal?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, Int?, OffsetDateTime?, BigDecimal?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, Int?, OffsetDateTime?, BigDecimal?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
