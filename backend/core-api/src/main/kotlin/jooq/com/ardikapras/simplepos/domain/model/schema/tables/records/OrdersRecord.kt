/*
 * This file is generated by jOOQ.
 */
package com.ardikapras.simplepos.domain.model.schema.tables.records


import com.ardikapras.simplepos.domain.model.schema.tables.Orders
import com.ardikapras.simplepos.domain.model.schema.tables.pojos.OrdersPojo

import jakarta.persistence.Column
import jakarta.persistence.Entity
import jakarta.persistence.GeneratedValue
import jakarta.persistence.GenerationType
import jakarta.persistence.Id
import jakarta.persistence.Table
import jakarta.validation.constraints.NotNull

import java.math.BigDecimal
import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Entity
@Table(
    name = "orders",
    schema = "public"
)
open class OrdersRecord() : UpdatableRecordImpl<OrdersRecord>(Orders.ORDERS), Record5<Int?, Int?, Int?, OffsetDateTime?, BigDecimal?> {

    @get:Id
    @get:GeneratedValue(strategy = GenerationType.IDENTITY)
    @get:Column(name = "order_id", nullable = false, precision = 32)
    open var orderId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    @get:Column(name = "user_id", precision = 32)
    open var userId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    @get:Column(name = "customer_id", precision = 32)
    open var customerId: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    @get:Column(name = "order_date", precision = 6)
    open var orderDate: OffsetDateTime?
        set(value): Unit = set(3, value)
        get(): OffsetDateTime? = get(3) as OffsetDateTime?

    @get:Column(name = "total_amount", nullable = false, precision = 10, scale = 2)
    @get:NotNull
    open var totalAmount: BigDecimal?
        set(value): Unit = set(4, value)
        get(): BigDecimal? = get(4) as BigDecimal?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Int?, Int?, Int?, OffsetDateTime?, BigDecimal?> = super.fieldsRow() as Row5<Int?, Int?, Int?, OffsetDateTime?, BigDecimal?>
    override fun valuesRow(): Row5<Int?, Int?, Int?, OffsetDateTime?, BigDecimal?> = super.valuesRow() as Row5<Int?, Int?, Int?, OffsetDateTime?, BigDecimal?>
    override fun field1(): Field<Int?> = Orders.ORDERS.ORDER_ID
    override fun field2(): Field<Int?> = Orders.ORDERS.USER_ID
    override fun field3(): Field<Int?> = Orders.ORDERS.CUSTOMER_ID
    override fun field4(): Field<OffsetDateTime?> = Orders.ORDERS.ORDER_DATE
    override fun field5(): Field<BigDecimal?> = Orders.ORDERS.TOTAL_AMOUNT
    override fun component1(): Int? = orderId
    override fun component2(): Int? = userId
    override fun component3(): Int? = customerId
    override fun component4(): OffsetDateTime? = orderDate
    override fun component5(): BigDecimal? = totalAmount
    override fun value1(): Int? = orderId
    override fun value2(): Int? = userId
    override fun value3(): Int? = customerId
    override fun value4(): OffsetDateTime? = orderDate
    override fun value5(): BigDecimal? = totalAmount

    override fun value1(value: Int?): OrdersRecord {
        this.orderId = value
        return this
    }

    override fun value2(value: Int?): OrdersRecord {
        this.userId = value
        return this
    }

    override fun value3(value: Int?): OrdersRecord {
        this.customerId = value
        return this
    }

    override fun value4(value: OffsetDateTime?): OrdersRecord {
        this.orderDate = value
        return this
    }

    override fun value5(value: BigDecimal?): OrdersRecord {
        this.totalAmount = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: OffsetDateTime?, value5: BigDecimal?): OrdersRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised OrdersRecord
     */
    constructor(orderId: Int? = null, userId: Int? = null, customerId: Int? = null, orderDate: OffsetDateTime? = null, totalAmount: BigDecimal? = null): this() {
        this.orderId = orderId
        this.userId = userId
        this.customerId = customerId
        this.orderDate = orderDate
        this.totalAmount = totalAmount
    }

    /**
     * Create a detached, initialised OrdersRecord
     */
    constructor(value: OrdersPojo?): this() {
        if (value != null) {
            this.orderId = value.orderId
            this.userId = value.userId
            this.customerId = value.customerId
            this.orderDate = value.orderDate
            this.totalAmount = value.totalAmount
        }
    }
}
