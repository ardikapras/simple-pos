/*
 * This file is generated by jOOQ.
 */
package com.ardikapras.simplepos.domain.model.schema.tables


import com.ardikapras.simplepos.domain.model.schema.Public
import com.ardikapras.simplepos.domain.model.schema.keys.ORDER_ITEMS_PKEY
import com.ardikapras.simplepos.domain.model.schema.keys.ORDER_ITEMS__ORDER_ITEMS_ORDER_ID_FKEY
import com.ardikapras.simplepos.domain.model.schema.keys.ORDER_ITEMS__ORDER_ITEMS_PRODUCT_ID_FKEY
import com.ardikapras.simplepos.domain.model.schema.tables.records.OrderItemsRecord

import java.math.BigDecimal
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class OrderItems(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, OrderItemsRecord>?,
    aliased: Table<OrderItemsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<OrderItemsRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.order_items</code>
         */
        val ORDER_ITEMS: OrderItems = OrderItems()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<OrderItemsRecord> = OrderItemsRecord::class.java

    /**
     * The column <code>public.order_items.order_item_id</code>.
     */
    val ORDER_ITEM_ID: TableField<OrderItemsRecord, Int?> = createField(DSL.name("order_item_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.order_items.order_id</code>.
     */
    val ORDER_ID: TableField<OrderItemsRecord, Int?> = createField(DSL.name("order_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.order_items.product_id</code>.
     */
    val PRODUCT_ID: TableField<OrderItemsRecord, Int?> = createField(DSL.name("product_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.order_items.quantity</code>.
     */
    val QUANTITY: TableField<OrderItemsRecord, Int?> = createField(DSL.name("quantity"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.order_items.unit_price</code>.
     */
    val UNIT_PRICE: TableField<OrderItemsRecord, BigDecimal?> = createField(DSL.name("unit_price"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "")

    /**
     * The column <code>public.order_items.total_price</code>.
     */
    val TOTAL_PRICE: TableField<OrderItemsRecord, BigDecimal?> = createField(DSL.name("total_price"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<OrderItemsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<OrderItemsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.order_items</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.order_items</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.order_items</code> table reference
     */
    constructor(): this(DSL.name("order_items"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, OrderItemsRecord>): this(Internal.createPathAlias(child, key), child, key, ORDER_ITEMS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<OrderItemsRecord, Int?> = super.getIdentity() as Identity<OrderItemsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<OrderItemsRecord> = ORDER_ITEMS_PKEY
    override fun getReferences(): List<ForeignKey<OrderItemsRecord, *>> = listOf(ORDER_ITEMS__ORDER_ITEMS_ORDER_ID_FKEY, ORDER_ITEMS__ORDER_ITEMS_PRODUCT_ID_FKEY)

    private lateinit var _orders: Orders
    private lateinit var _products: Products

    /**
     * Get the implicit join path to the <code>public.orders</code> table.
     */
    fun orders(): Orders {
        if (!this::_orders.isInitialized)
            _orders = Orders(this, ORDER_ITEMS__ORDER_ITEMS_ORDER_ID_FKEY)

        return _orders;
    }

    val orders: Orders
        get(): Orders = orders()

    /**
     * Get the implicit join path to the <code>public.products</code> table.
     */
    fun products(): Products {
        if (!this::_products.isInitialized)
            _products = Products(this, ORDER_ITEMS__ORDER_ITEMS_PRODUCT_ID_FKEY)

        return _products;
    }

    val products: Products
        get(): Products = products()
    override fun `as`(alias: String): OrderItems = OrderItems(DSL.name(alias), this)
    override fun `as`(alias: Name): OrderItems = OrderItems(alias, this)
    override fun `as`(alias: Table<*>): OrderItems = OrderItems(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): OrderItems = OrderItems(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): OrderItems = OrderItems(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): OrderItems = OrderItems(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<Int?, Int?, Int?, Int?, BigDecimal?, BigDecimal?> = super.fieldsRow() as Row6<Int?, Int?, Int?, Int?, BigDecimal?, BigDecimal?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, Int?, Int?, BigDecimal?, BigDecimal?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, Int?, Int?, BigDecimal?, BigDecimal?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
