/*
 * This file is generated by jOOQ.
 */
package com.ardikapras.simplepos.domain.model.schema.tables.records


import com.ardikapras.simplepos.domain.model.schema.tables.OrderItems
import com.ardikapras.simplepos.domain.model.schema.tables.pojos.OrderItemsPojo

import jakarta.persistence.Column
import jakarta.persistence.Entity
import jakarta.persistence.GeneratedValue
import jakarta.persistence.GenerationType
import jakarta.persistence.Id
import jakarta.persistence.Table
import jakarta.validation.constraints.NotNull

import java.math.BigDecimal

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Entity
@Table(
    name = "order_items",
    schema = "public"
)
open class OrderItemsRecord() : UpdatableRecordImpl<OrderItemsRecord>(OrderItems.ORDER_ITEMS), Record6<Int?, Int?, Int?, Int?, BigDecimal?, BigDecimal?> {

    @get:Id
    @get:GeneratedValue(strategy = GenerationType.IDENTITY)
    @get:Column(name = "order_item_id", nullable = false, precision = 32)
    open var orderItemId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    @get:Column(name = "order_id", precision = 32)
    open var orderId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    @get:Column(name = "product_id", precision = 32)
    open var productId: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    @get:Column(name = "quantity", nullable = false, precision = 32)
    @get:NotNull
    open var quantity: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    @get:Column(name = "unit_price", nullable = false, precision = 10, scale = 2)
    @get:NotNull
    open var unitPrice: BigDecimal?
        set(value): Unit = set(4, value)
        get(): BigDecimal? = get(4) as BigDecimal?

    @get:Column(name = "total_price", nullable = false, precision = 10, scale = 2)
    @get:NotNull
    open var totalPrice: BigDecimal?
        set(value): Unit = set(5, value)
        get(): BigDecimal? = get(5) as BigDecimal?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Int?, Int?, Int?, Int?, BigDecimal?, BigDecimal?> = super.fieldsRow() as Row6<Int?, Int?, Int?, Int?, BigDecimal?, BigDecimal?>
    override fun valuesRow(): Row6<Int?, Int?, Int?, Int?, BigDecimal?, BigDecimal?> = super.valuesRow() as Row6<Int?, Int?, Int?, Int?, BigDecimal?, BigDecimal?>
    override fun field1(): Field<Int?> = OrderItems.ORDER_ITEMS.ORDER_ITEM_ID
    override fun field2(): Field<Int?> = OrderItems.ORDER_ITEMS.ORDER_ID
    override fun field3(): Field<Int?> = OrderItems.ORDER_ITEMS.PRODUCT_ID
    override fun field4(): Field<Int?> = OrderItems.ORDER_ITEMS.QUANTITY
    override fun field5(): Field<BigDecimal?> = OrderItems.ORDER_ITEMS.UNIT_PRICE
    override fun field6(): Field<BigDecimal?> = OrderItems.ORDER_ITEMS.TOTAL_PRICE
    override fun component1(): Int? = orderItemId
    override fun component2(): Int? = orderId
    override fun component3(): Int? = productId
    override fun component4(): Int? = quantity
    override fun component5(): BigDecimal? = unitPrice
    override fun component6(): BigDecimal? = totalPrice
    override fun value1(): Int? = orderItemId
    override fun value2(): Int? = orderId
    override fun value3(): Int? = productId
    override fun value4(): Int? = quantity
    override fun value5(): BigDecimal? = unitPrice
    override fun value6(): BigDecimal? = totalPrice

    override fun value1(value: Int?): OrderItemsRecord {
        this.orderItemId = value
        return this
    }

    override fun value2(value: Int?): OrderItemsRecord {
        this.orderId = value
        return this
    }

    override fun value3(value: Int?): OrderItemsRecord {
        this.productId = value
        return this
    }

    override fun value4(value: Int?): OrderItemsRecord {
        this.quantity = value
        return this
    }

    override fun value5(value: BigDecimal?): OrderItemsRecord {
        this.unitPrice = value
        return this
    }

    override fun value6(value: BigDecimal?): OrderItemsRecord {
        this.totalPrice = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: Int?, value5: BigDecimal?, value6: BigDecimal?): OrderItemsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised OrderItemsRecord
     */
    constructor(orderItemId: Int? = null, orderId: Int? = null, productId: Int? = null, quantity: Int? = null, unitPrice: BigDecimal? = null, totalPrice: BigDecimal? = null): this() {
        this.orderItemId = orderItemId
        this.orderId = orderId
        this.productId = productId
        this.quantity = quantity
        this.unitPrice = unitPrice
        this.totalPrice = totalPrice
    }

    /**
     * Create a detached, initialised OrderItemsRecord
     */
    constructor(value: OrderItemsPojo?): this() {
        if (value != null) {
            this.orderItemId = value.orderItemId
            this.orderId = value.orderId
            this.productId = value.productId
            this.quantity = value.quantity
            this.unitPrice = value.unitPrice
            this.totalPrice = value.totalPrice
        }
    }
}
